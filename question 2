class CircularQueue:
    def __init__(self, capacity):
        self.capacity = capacity
        self.queue = [None] * capacity
        self.front = self.rear = -1

    def enqueue(self, item):
        "Add an item to the rear of the circular queue."
        if (self.rear + 1) % self.capacity == self.front:
            raise IndexError("Queue is full")
        elif self.is_empty():
            self.front = self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.capacity
        self.queue[self.rear] = item

    def dequeue(self):
        "Remove and return the front item from the circular queue."
        if self.is_empty():
            raise IndexError("Queue is empty")
        elif self.front == self.rear:
            item = self.queue[self.front]
            self.front = self.rear = -1
        else:
            item = self.queue[self.front]
            self.front = (self.front + 1) % self.capacity
        return item

    def is_empty(self):
        "Check if the circular queue is empty."
        return self.front == self.rear == -1

    def is_full(self):
        "Check if the circular queue is full."
        return (self.rear + 1) % self.capacity == self.front

    def size(self):
        "Return the number of items in the circular queue."
        if self.is_empty():
            return 0
        elif self.front <= self.rear:
            return self.rear - self.front + 1
        else:
            return self.capacity - (self.front - self.rear - 1)

my_circular_queue = CircularQueue(5)
my_circular_queue.enqueue(10)
my_circular_queue.enqueue(20)
my_circular_queue.enqueue(30)
print("Is the circular queue empty?", my_circular_queue.is_empty()) 
print("Is the circular queue full?", my_circular_queue.is_full())  
print("Size of the circular queue:", my_circular_queue.size()) 
print("Dequeued item:", my_circular_queue.dequeue())  
print("Size of the circular queue after dequeue:", my_circular_queue.size())  
